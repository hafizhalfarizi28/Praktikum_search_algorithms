{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMBQF5KMBC+OHlJrsbbgo+6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"EQWpPq1xD_cl"},"outputs":[],"source":["# python3 program to print DFS traversal\n","# from a given graph\n","from collections import defaultdict\n","\n","# kelas ini merepresentasikan sebuah graf yang diarahkan\n","# Menggunakan representasi daftar kejadian\n","class Graph:\n","\n","  #konstruktor\n","  def __init__(self):\n","\n","    # Kamus default untuk menyimpan graf\n","    self.graph = defaultdict(list)\n","\n","  # fungsi untuk menambahkan tepi ke graf\n","  def addEdge(self,u, v):\n","    self.graph[u].append(v)\n","\n","  #fungsi yang digunakan oleh DFS\n","  def DFSUtil(self, v, visited):\n","\n","    #Tandai node saat ini sebagai sudah dkunjungi\n","    #dan cetak\n","    visited.add(v)\n","    print(v, end = ' ')\n","    # panggil rekursif untuk semua titik ujung\n","    # yang berdekatan dengan titik ini\n","    for neighbour in self.graph[v]:\n","      if neighbour not in visited:\n","        self.DFSUtil(neighbour, visited)\n","  #fungsi untuk melakukan penelusuran DFS. ini menggunakan\n","  #DFSUtil() rekursif\n","  def DFS(self, v):\n","\n","      #buat himpunan untuk menyimpan node yang sudah dikunjungi\n","      visited = set()\n","\n","      #panggil fungsi bantu rekursif\n","      #untuk mencetak penelusuran DFS\n","      self.DFSUtil(v, visited)\n","\n","# Kode pengguna\n","if __name__==\"__main__\":\n","  g = Graph()\n","  g.addEdge(0, 1)\n","  g.addEdge(0, 2)\n","  g.addEdge(1, 2)\n","  g.addEdge(2, 0)\n","  g.addEdge(2, 3)\n","  g.addEdge(3, 3)\n","\n","  print(\"Berikut adalah penelusuran depth first (dimulai dari node 2)\")\n","\n","  # Panggil fungsi\n","  g.DFS(2)\n","\n","  # Kode ini disambungkan oleh neelam yadav"]}]}